import pickle
import torch
import tqdm
from multiprocessing import Pool, cpu_count
from functools import partial
from sklearn.metrics import precision_recall_fscore_support
from get_self_implemented_concepts import *
import random


def convert_to_alive_block_zero(index):
    arry = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1223, 1224, 1225, 1227, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1421, 1422, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1532, 1533, 1534, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1566, 1567, 1568, 1570, 1571, 1572, 1573, 1574, 1575, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1605, 1606, 1607, 1608, 1609, 1610, 1612, 1615, 1616, 1617, 1618, 1620, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1680, 1681, 1682, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1693, 1694, 1696, 1697, 1698, 1699, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1732, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1778, 1779, 1780, 1781, 1782, 1783, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1881, 1882, 1883, 1884, 1885, 1887, 1888, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1900, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047]
    return arry.index(index)
def convert_to_alive_block_one(index):
    arry = [1, 5, 6, 7, 8, 9, 11, 14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 44, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 114, 115, 116, 117, 119, 121, 122, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 173, 174, 175, 178, 180, 181, 182, 185, 186, 187, 188, 190, 191, 194, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 216, 217, 218, 220, 221, 222, 224, 225, 227, 229, 230, 233, 235, 236, 240, 241, 242, 244, 246, 248, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 264, 266, 267, 268, 269, 270, 274, 275, 278, 279, 281, 283, 285, 286, 287, 289, 290, 292, 294, 295, 296, 297, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 354, 355, 357, 358, 359, 361, 363, 364, 365, 369, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 429, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 503, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 521, 522, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 542, 543, 544, 545, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 601, 602, 603, 606, 607, 608, 609, 610, 612, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 633, 635, 636, 638, 639, 640, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 710, 711, 713, 714, 716, 717, 718, 719, 721, 723, 724, 725, 726, 728, 729, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 749, 750, 751, 752, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 796, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 861, 862, 863, 867, 868, 869, 870, 872, 873, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 969, 970, 971, 972, 973, 974, 976, 977, 979, 980, 983, 984, 985, 986, 988, 989, 990, 991, 992, 994, 996, 997, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1027, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1073, 1074, 1075, 1076, 1078, 1079, 1080, 1082, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1101, 1103, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 1144, 1145, 1146, 1150, 1151, 1152, 1153, 1154, 1156, 1157, 1158, 1162, 1163, 1165, 1166, 1169, 1170, 1172, 1173, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1224, 1227, 1228, 1229, 1231, 1232, 1233, 1234, 1236, 1238, 1239, 1241, 1242, 1243, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1259, 1260, 1262, 1265, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1306, 1307, 1308, 1309, 1312, 1313, 1315, 1316, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1330, 1331, 1332, 1333, 1335, 1336, 1337, 1339, 1341, 1342, 1344, 1345, 1346, 1349, 1350, 1351, 1353, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1371, 1372, 1373, 1374, 1375, 1378, 1379, 1381, 1383, 1384, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1397, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1411, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1421, 1422, 1424, 1425, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1436, 1438, 1439, 1441, 1442, 1445, 1447, 1448, 1449, 1450, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1461, 1462, 1463, 1464, 1465, 1466, 1468, 1470, 1472, 1474, 1476, 1477, 1478, 1479, 1481, 1482, 1484, 1486, 1487, 1488, 1489, 1492, 1493, 1495, 1496, 1497, 1498, 1500, 1501, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1512, 1513, 1514, 1515, 1517, 1518, 1520, 1521, 1522, 1523, 1524, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1537, 1539, 1540, 1544, 1548, 1549, 1552, 1554, 1555, 1556, 1557, 1558, 1560, 1561, 1562, 1563, 1566, 1568, 1569, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1589, 1590, 1591, 1593, 1596, 1597, 1598, 1600, 1601, 1602, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1614, 1615, 1616, 1618, 1619, 1621, 1622, 1623, 1624, 1626, 1627, 1628, 1629, 1631, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1643, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1663, 1664, 1665, 1667, 1669, 1670, 1671, 1672, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1690, 1691, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1710, 1712, 1713, 1714, 1716, 1717, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1742, 1743, 1746, 1747, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1759, 1761, 1762, 1765, 1766, 1768, 1769, 1771, 1772, 1774, 1775, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1801, 1803, 1804, 1805, 1806, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1819, 1820, 1822, 1823, 1825, 1827, 1828, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1838, 1839, 1840, 1844, 1845, 1846, 1847, 1852, 1853, 1854, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1866, 1867, 1870, 1871, 1873, 1874, 1876, 1878, 1879, 1881, 1883, 1884, 1885, 1886, 1888, 1889, 1891, 1892, 1893, 1894, 1895, 1896, 1898, 1899, 1901, 1902, 1903, 1905, 1906, 1907, 1908, 1909, 1911, 1912, 1913, 1914, 1916, 1918, 1920, 1924, 1925, 1926, 1927, 1929, 1930, 1931, 1932, 1933, 1934, 1936, 1939, 1940, 1941, 1942, 1945, 1946, 1947, 1948, 1949, 1950, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1962, 1964, 1965, 1966, 1967, 1968, 1970, 1971, 1972, 1975, 1976, 1977, 1978, 1979, 1980, 1982, 1983, 1984, 1985, 1986, 1987, 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2006, 2008, 2009, 2011, 2012, 2014, 2016, 2019, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2033, 2034, 2035, 2037, 2039, 2040, 2041, 2043, 2044, 2045, 2047]
    return arry.index(index)

print(convert_to_alive_block_zero(1945))

squarewise_alarmbells = {"b1": (0, 717), "d1": (0, 1888), "f1": (0, 1864), "h1": (0, 1000), "d2": (0, 1608), "e2":(0, 1701), "f2": (0, 1747), "a3": (1, 416), "c3": (1, 1346), "d3": (0, 1676), "e3": (0, 142), "h3": (1, 1009), "b4": (1, 1), "d4": (0, 120), "e4": (1, 977), "f4": (1, 1846), "g4": (1, 538), "h4": (0, 437), "b5": (0, 1687), "d5": (0, 1538), "e5": (0, 630), "f5": (1, 843), "c6": (1, 574), "e6": (0, 1924), "e7": (0, 2029), "f7": (0, 1715)}

def square_index(square_name: str) -> int:
    if not isinstance(square_name, str) or len(square_name) != 2:
        raise ValueError("Square name must be a string of length 2")

    file = square_name[0].lower()
    rank = square_name[1]

    if file not in 'abcdefgh' or rank not in '12345678':
        raise ValueError("Invalid square name")

    file_index = 'abcdefgh'.index(file)
    rank_index = '12345678'.index(rank)

    return rank_index * 8 + file_index

move_dependent_header = []

for square in range(64):
    defensive_root_func = 'is_piece_no_longer_under_attack'
    # offensive_root_func = 'is_move_about_critical_square'
    defensive_key = defensive_root_func + '_' + chess.square_name(square)
    # offensive_key = offensive_root_func + '_' + chess.square_name(square)
    defensive_partial_function = partial(is_piece_no_longer_under_attack, square_index=square)
    # offensive_partial_function = partial(is_move_about_critical_square, square_index=square)

    function_map[defensive_key] = defensive_partial_function
    # function_map[offensive_key] = offensive_partial_function

    move_dependent_header.append(defensive_key)
    # move_dependent_header.append(offensive_key)



def get_move_dict():
    return {0: 'a1h8', 1: 'a1a8', 2: 'a1g7', 3: 'a1a7', 4: 'a1f6', 5: 'a1a6', 6: 'a1e5', 7: 'a1a5', 8: 'a1d4', 9: 'a1a4', 10: 'a1c3', 11: 'a1a3', 12: 'a1b2', 13: 'a1a2', 14: 'a1h1', 15: 'a1g1', 16: 'a1f1', 17: 'a1e1', 18: 'a1d1', 19: 'a1c1', 20: 'a1b1', 21: 'a1b3', 22: 'a1c2', 23: 'b1b8', 24: 'b1h7', 25: 'b1b7', 26: 'b1g6', 27: 'b1b6', 28: 'b1f5', 29: 'b1b5', 30: 'b1e4', 31: 'b1b4', 32: 'b1d3', 33: 'b1b3', 34: 'b1c2', 35: 'b1b2', 36: 'b1a2', 37: 'b1h1', 38: 'b1g1', 39: 'b1f1', 40: 'b1e1', 41: 'b1d1', 42: 'b1c1', 43: 'b1a1', 44: 'b1c3', 45: 'b1a3', 46: 'b1d2', 47: 'c1c8', 48: 'c1c7', 49: 'c1h6', 50: 'c1c6', 51: 'c1g5', 52: 'c1c5', 53: 'c1f4', 54: 'c1c4', 55: 'c1e3', 56: 'c1c3', 57: 'c1a3', 58: 'c1d2', 59: 'c1c2', 60: 'c1b2', 61: 'c1h1', 62: 'c1g1', 63: 'c1f1', 64: 'c1e1', 65: 'c1d1', 66: 'c1b1', 67: 'c1a1', 68: 'c1d3', 69: 'c1b3', 70: 'c1e2', 71: 'c1a2', 72: 'd1d8', 73: 'd1d7', 74: 'd1d6', 75: 'd1h5', 76: 'd1d5', 77: 'd1g4', 78: 'd1d4', 79: 'd1a4', 80: 'd1f3', 81: 'd1d3', 82: 'd1b3', 83: 'd1e2', 84: 'd1d2', 85: 'd1c2', 86: 'd1h1', 87: 'd1g1', 88: 'd1f1', 89: 'd1e1', 90: 'd1c1', 91: 'd1b1', 92: 'd1a1', 93: 'd1e3', 94: 'd1c3', 95: 'd1f2', 96: 'd1b2', 97: 'e1e8', 98: 'e1e7', 99: 'e1e6', 100: 'e1e5', 101: 'e1a5', 102: 'e1h4', 103: 'e1e4', 104: 'e1b4', 105: 'e1g3', 106: 'e1e3', 107: 'e1c3', 108: 'e1f2', 109: 'e1e2', 110: 'e1d2', 111: 'e1h1', 112: 'e1g1', 113: 'e1f1', 114: 'e1d1', 115: 'e1c1', 116: 'e1b1', 117: 'e1a1', 118: 'e1f3', 119: 'e1d3', 120: 'e1g2', 121: 'e1c2', 122: 'f1f8', 123: 'f1f7', 124: 'f1f6', 125: 'f1a6', 126: 'f1f5', 127: 'f1b5', 128: 'f1f4', 129: 'f1c4', 130: 'f1h3', 131: 'f1f3', 132: 'f1d3', 133: 'f1g2', 134: 'f1f2', 135: 'f1e2', 136: 'f1h1', 137: 'f1g1', 138: 'f1e1', 139: 'f1d1', 140: 'f1c1', 141: 'f1b1', 142: 'f1a1', 143: 'f1g3', 144: 'f1e3', 145: 'f1h2', 146: 'f1d2', 147: 'g1g8', 148: 'g1g7', 149: 'g1a7', 150: 'g1g6', 151: 'g1b6', 152: 'g1g5', 153: 'g1c5', 154: 'g1g4', 155: 'g1d4', 156: 'g1g3', 157: 'g1e3', 158: 'g1h2', 159: 'g1g2', 160: 'g1f2', 161: 'g1h1', 162: 'g1f1', 163: 'g1e1', 164: 'g1d1', 165: 'g1c1', 166: 'g1b1', 167: 'g1a1', 168: 'g1h3', 169: 'g1f3', 170: 'g1e2', 171: 'h1h8', 172: 'h1a8', 173: 'h1h7', 174: 'h1b7', 175: 'h1h6', 176: 'h1c6', 177: 'h1h5', 178: 'h1d5', 179: 'h1h4', 180: 'h1e4', 181: 'h1h3', 182: 'h1f3', 183: 'h1h2', 184: 'h1g2', 185: 'h1g1', 186: 'h1f1', 187: 'h1e1', 188: 'h1d1', 189: 'h1c1', 190: 'h1b1', 191: 'h1a1', 192: 'h1g3', 193: 'h1f2', 194: 'a2g8', 195: 'a2a8', 196: 'a2f7', 197: 'a2a7', 198: 'a2e6', 199: 'a2a6', 200: 'a2d5', 201: 'a2a5', 202: 'a2c4', 203: 'a2a4', 204: 'a2b3', 205: 'a2a3', 206: 'a2h2', 207: 'a2g2', 208: 'a2f2', 209: 'a2e2', 210: 'a2d2', 211: 'a2c2', 212: 'a2b2', 213: 'a2b1', 214: 'a2a1', 215: 'a2b4', 216: 'a2c3', 217: 'a2c1', 218: 'b2h8', 219: 'b2b8', 220: 'b2g7', 221: 'b2b7', 222: 'b2f6', 223: 'b2b6', 224: 'b2e5', 225: 'b2b5', 226: 'b2d4', 227: 'b2b4', 228: 'b2c3', 229: 'b2b3', 230: 'b2a3', 231: 'b2h2', 232: 'b2g2', 233: 'b2f2', 234: 'b2e2', 235: 'b2d2', 236: 'b2c2', 237: 'b2a2', 238: 'b2c1', 239: 'b2b1', 240: 'b2a1', 241: 'b2c4', 242: 'b2a4', 243: 'b2d3', 244: 'b2d1', 245: 'c2c8', 246: 'c2h7', 247: 'c2c7', 248: 'c2g6', 249: 'c2c6', 250: 'c2f5', 251: 'c2c5', 252: 'c2e4', 253: 'c2c4', 254: 'c2a4', 255: 'c2d3', 256: 'c2c3', 257: 'c2b3', 258: 'c2h2', 259: 'c2g2', 260: 'c2f2', 261: 'c2e2', 262: 'c2d2', 263: 'c2b2', 264: 'c2a2', 265: 'c2d1', 266: 'c2c1', 267: 'c2b1', 268: 'c2d4', 269: 'c2b4', 270: 'c2e3', 271: 'c2a3', 272: 'c2e1', 273: 'c2a1', 274: 'd2d8', 275: 'd2d7', 276: 'd2h6', 277: 'd2d6', 278: 'd2g5', 279: 'd2d5', 280: 'd2a5', 281: 'd2f4', 282: 'd2d4', 283: 'd2b4', 284: 'd2e3', 285: 'd2d3', 286: 'd2c3', 287: 'd2h2', 288: 'd2g2', 289: 'd2f2', 290: 'd2e2', 291: 'd2c2', 292: 'd2b2', 293: 'd2a2', 294: 'd2e1', 295: 'd2d1', 296: 'd2c1', 297: 'd2e4', 298: 'd2c4', 299: 'd2f3', 300: 'd2b3', 301: 'd2f1', 302: 'd2b1', 303: 'e2e8', 304: 'e2e7', 305: 'e2e6', 306: 'e2a6', 307: 'e2h5', 308: 'e2e5', 309: 'e2b5', 310: 'e2g4', 311: 'e2e4', 312: 'e2c4', 313: 'e2f3', 314: 'e2e3', 315: 'e2d3', 316: 'e2h2', 317: 'e2g2', 318: 'e2f2', 319: 'e2d2', 320: 'e2c2', 321: 'e2b2', 322: 'e2a2', 323: 'e2f1', 324: 'e2e1', 325: 'e2d1', 326: 'e2f4', 327: 'e2d4', 328: 'e2g3', 329: 'e2c3', 330: 'e2g1', 331: 'e2c1', 332: 'f2f8', 333: 'f2f7', 334: 'f2a7', 335: 'f2f6', 336: 'f2b6', 337: 'f2f5', 338: 'f2c5', 339: 'f2h4', 340: 'f2f4', 341: 'f2d4', 342: 'f2g3', 343: 'f2f3', 344: 'f2e3', 345: 'f2h2', 346: 'f2g2', 347: 'f2e2', 348: 'f2d2', 349: 'f2c2', 350: 'f2b2', 351: 'f2a2', 352: 'f2g1', 353: 'f2f1', 354: 'f2e1', 355: 'f2g4', 356: 'f2e4', 357: 'f2h3', 358: 'f2d3', 359: 'f2h1', 360: 'f2d1', 361: 'g2g8', 362: 'g2a8', 363: 'g2g7', 364: 'g2b7', 365: 'g2g6', 366: 'g2c6', 367: 'g2g5', 368: 'g2d5', 369: 'g2g4', 370: 'g2e4', 371: 'g2h3', 372: 'g2g3', 373: 'g2f3', 374: 'g2h2', 375: 'g2f2', 376: 'g2e2', 377: 'g2d2', 378: 'g2c2', 379: 'g2b2', 380: 'g2a2', 381: 'g2h1', 382: 'g2g1', 383: 'g2f1', 384: 'g2h4', 385: 'g2f4', 386: 'g2e3', 387: 'g2e1', 388: 'h2h8', 389: 'h2b8', 390: 'h2h7', 391: 'h2c7', 392: 'h2h6', 393: 'h2d6', 394: 'h2h5', 395: 'h2e5', 396: 'h2h4', 397: 'h2f4', 398: 'h2h3', 399: 'h2g3', 400: 'h2g2', 401: 'h2f2', 402: 'h2e2', 403: 'h2d2', 404: 'h2c2', 405: 'h2b2', 406: 'h2a2', 407: 'h2h1', 408: 'h2g1', 409: 'h2g4', 410: 'h2f3', 411: 'h2f1', 412: 'a3f8', 413: 'a3a8', 414: 'a3e7', 415: 'a3a7', 416: 'a3d6', 417: 'a3a6', 418: 'a3c5', 419: 'a3a5', 420: 'a3b4', 421: 'a3a4', 422: 'a3h3', 423: 'a3g3', 424: 'a3f3', 425: 'a3e3', 426: 'a3d3', 427: 'a3c3', 428: 'a3b3', 429: 'a3b2', 430: 'a3a2', 431: 'a3c1', 432: 'a3a1', 433: 'a3b5', 434: 'a3c4', 435: 'a3c2', 436: 'a3b1', 437: 'b3g8', 438: 'b3b8', 439: 'b3f7', 440: 'b3b7', 441: 'b3e6', 442: 'b3b6', 443: 'b3d5', 444: 'b3b5', 445: 'b3c4', 446: 'b3b4', 447: 'b3a4', 448: 'b3h3', 449: 'b3g3', 450: 'b3f3', 451: 'b3e3', 452: 'b3d3', 453: 'b3c3', 454: 'b3a3', 455: 'b3c2', 456: 'b3b2', 457: 'b3a2', 458: 'b3d1', 459: 'b3b1', 460: 'b3c5', 461: 'b3a5', 462: 'b3d4', 463: 'b3d2', 464: 'b3c1', 465: 'b3a1', 466: 'c3h8', 467: 'c3c8', 468: 'c3g7', 469: 'c3c7', 470: 'c3f6', 471: 'c3c6', 472: 'c3e5', 473: 'c3c5', 474: 'c3a5', 475: 'c3d4', 476: 'c3c4', 477: 'c3b4', 478: 'c3h3', 479: 'c3g3', 480: 'c3f3', 481: 'c3e3', 482: 'c3d3', 483: 'c3b3', 484: 'c3a3', 485: 'c3d2', 486: 'c3c2', 487: 'c3b2', 488: 'c3e1', 489: 'c3c1', 490: 'c3a1', 491: 'c3d5', 492: 'c3b5', 493: 'c3e4', 494: 'c3a4', 495: 'c3e2', 496: 'c3a2', 497: 'c3d1', 498: 'c3b1', 499: 'd3d8', 500: 'd3h7', 501: 'd3d7', 502: 'd3g6', 503: 'd3d6', 504: 'd3a6', 505: 'd3f5', 506: 'd3d5', 507: 'd3b5', 508: 'd3e4', 509: 'd3d4', 510: 'd3c4', 511: 'd3h3', 512: 'd3g3', 513: 'd3f3', 514: 'd3e3', 515: 'd3c3', 516: 'd3b3', 517: 'd3a3', 518: 'd3e2', 519: 'd3d2', 520: 'd3c2', 521: 'd3f1', 522: 'd3d1', 523: 'd3b1', 524: 'd3e5', 525: 'd3c5', 526: 'd3f4', 527: 'd3b4', 528: 'd3f2', 529: 'd3b2', 530: 'd3e1', 531: 'd3c1', 532: 'e3e8', 533: 'e3e7', 534: 'e3a7', 535: 'e3h6', 536: 'e3e6', 537: 'e3b6', 538: 'e3g5', 539: 'e3e5', 540: 'e3c5', 541: 'e3f4', 542: 'e3e4', 543: 'e3d4', 544: 'e3h3', 545: 'e3g3', 546: 'e3f3', 547: 'e3d3', 548: 'e3c3', 549: 'e3b3', 550: 'e3a3', 551: 'e3f2', 552: 'e3e2', 553: 'e3d2', 554: 'e3g1', 555: 'e3e1', 556: 'e3c1', 557: 'e3f5', 558: 'e3d5', 559: 'e3g4', 560: 'e3c4', 561: 'e3g2', 562: 'e3c2', 563: 'e3f1', 564: 'e3d1', 565: 'f3f8', 566: 'f3a8', 567: 'f3f7', 568: 'f3b7', 569: 'f3f6', 570: 'f3c6', 571: 'f3h5', 572: 'f3f5', 573: 'f3d5', 574: 'f3g4', 575: 'f3f4', 576: 'f3e4', 577: 'f3h3', 578: 'f3g3', 579: 'f3e3', 580: 'f3d3', 581: 'f3c3', 582: 'f3b3', 583: 'f3a3', 584: 'f3g2', 585: 'f3f2', 586: 'f3e2', 587: 'f3h1', 588: 'f3f1', 589: 'f3d1', 590: 'f3g5', 591: 'f3e5', 592: 'f3h4', 593: 'f3d4', 594: 'f3h2', 595: 'f3d2', 596: 'f3g1', 597: 'f3e1', 598: 'g3g8', 599: 'g3b8', 600: 'g3g7', 601: 'g3c7', 602: 'g3g6', 603: 'g3d6', 604: 'g3g5', 605: 'g3e5', 606: 'g3h4', 607: 'g3g4', 608: 'g3f4', 609: 'g3h3', 610: 'g3f3', 611: 'g3e3', 612: 'g3d3', 613: 'g3c3', 614: 'g3b3', 615: 'g3a3', 616: 'g3h2', 617: 'g3g2', 618: 'g3f2', 619: 'g3g1', 620: 'g3e1', 621: 'g3h5', 622: 'g3f5', 623: 'g3e4', 624: 'g3e2', 625: 'g3h1', 626: 'g3f1', 627: 'h3h8', 628: 'h3c8', 629: 'h3h7', 630: 'h3d7', 631: 'h3h6', 632: 'h3e6', 633: 'h3h5', 634: 'h3f5', 635: 'h3h4', 636: 'h3g4', 637: 'h3g3', 638: 'h3f3', 639: 'h3e3', 640: 'h3d3', 641: 'h3c3', 642: 'h3b3', 643: 'h3a3', 644: 'h3h2', 645: 'h3g2', 646: 'h3h1', 647: 'h3f1', 648: 'h3g5', 649: 'h3f4', 650: 'h3f2', 651: 'h3g1', 652: 'a4e8', 653: 'a4a8', 654: 'a4d7', 655: 'a4a7', 656: 'a4c6', 657: 'a4a6', 658: 'a4b5', 659: 'a4a5', 660: 'a4h4', 661: 'a4g4', 662: 'a4f4', 663: 'a4e4', 664: 'a4d4', 665: 'a4c4', 666: 'a4b4', 667: 'a4b3', 668: 'a4a3', 669: 'a4c2', 670: 'a4a2', 671: 'a4d1', 672: 'a4a1', 673: 'a4b6', 674: 'a4c5', 675: 'a4c3', 676: 'a4b2', 677: 'b4f8', 678: 'b4b8', 679: 'b4e7', 680: 'b4b7', 681: 'b4d6', 682: 'b4b6', 683: 'b4c5', 684: 'b4b5', 685: 'b4a5', 686: 'b4h4', 687: 'b4g4', 688: 'b4f4', 689: 'b4e4', 690: 'b4d4', 691: 'b4c4', 692: 'b4a4', 693: 'b4c3', 694: 'b4b3', 695: 'b4a3', 696: 'b4d2', 697: 'b4b2', 698: 'b4e1', 699: 'b4b1', 700: 'b4c6', 701: 'b4a6', 702: 'b4d5', 703: 'b4d3', 704: 'b4c2', 705: 'b4a2', 706: 'c4g8', 707: 'c4c8', 708: 'c4f7', 709: 'c4c7', 710: 'c4e6', 711: 'c4c6', 712: 'c4a6', 713: 'c4d5', 714: 'c4c5', 715: 'c4b5', 716: 'c4h4', 717: 'c4g4', 718: 'c4f4', 719: 'c4e4', 720: 'c4d4', 721: 'c4b4', 722: 'c4a4', 723: 'c4d3', 724: 'c4c3', 725: 'c4b3', 726: 'c4e2', 727: 'c4c2', 728: 'c4a2', 729: 'c4f1', 730: 'c4c1', 731: 'c4d6', 732: 'c4b6', 733: 'c4e5', 734: 'c4a5', 735: 'c4e3', 736: 'c4a3', 737: 'c4d2', 738: 'c4b2', 739: 'd4h8', 740: 'd4d8', 741: 'd4g7', 742: 'd4d7', 743: 'd4a7', 744: 'd4f6', 745: 'd4d6', 746: 'd4b6', 747: 'd4e5', 748: 'd4d5', 749: 'd4c5', 750: 'd4h4', 751: 'd4g4', 752: 'd4f4', 753: 'd4e4', 754: 'd4c4', 755: 'd4b4', 756: 'd4a4', 757: 'd4e3', 758: 'd4d3', 759: 'd4c3', 760: 'd4f2', 761: 'd4d2', 762: 'd4b2', 763: 'd4g1', 764: 'd4d1', 765: 'd4a1', 766: 'd4e6', 767: 'd4c6', 768: 'd4f5', 769: 'd4b5', 770: 'd4f3', 771: 'd4b3', 772: 'd4e2', 773: 'd4c2', 774: 'e4e8', 775: 'e4a8', 776: 'e4h7', 777: 'e4e7', 778: 'e4b7', 779: 'e4g6', 780: 'e4e6', 781: 'e4c6', 782: 'e4f5', 783: 'e4e5', 784: 'e4d5', 785: 'e4h4', 786: 'e4g4', 787: 'e4f4', 788: 'e4d4', 789: 'e4c4', 790: 'e4b4', 791: 'e4a4', 792: 'e4f3', 793: 'e4e3', 794: 'e4d3', 795: 'e4g2', 796: 'e4e2', 797: 'e4c2', 798: 'e4h1', 799: 'e4e1', 800: 'e4b1', 801: 'e4f6', 802: 'e4d6', 803: 'e4g5', 804: 'e4c5', 805: 'e4g3', 806: 'e4c3', 807: 'e4f2', 808: 'e4d2', 809: 'f4f8', 810: 'f4b8', 811: 'f4f7', 812: 'f4c7', 813: 'f4h6', 814: 'f4f6', 815: 'f4d6', 816: 'f4g5', 817: 'f4f5', 818: 'f4e5', 819: 'f4h4', 820: 'f4g4', 821: 'f4e4', 822: 'f4d4', 823: 'f4c4', 824: 'f4b4', 825: 'f4a4', 826: 'f4g3', 827: 'f4f3', 828: 'f4e3', 829: 'f4h2', 830: 'f4f2', 831: 'f4d2', 832: 'f4f1', 833: 'f4c1', 834: 'f4g6', 835: 'f4e6', 836: 'f4h5', 837: 'f4d5', 838: 'f4h3', 839: 'f4d3', 840: 'f4g2', 841: 'f4e2', 842: 'g4g8', 843: 'g4c8', 844: 'g4g7', 845: 'g4d7', 846: 'g4g6', 847: 'g4e6', 848: 'g4h5', 849: 'g4g5', 850: 'g4f5', 851: 'g4h4', 852: 'g4f4', 853: 'g4e4', 854: 'g4d4', 855: 'g4c4', 856: 'g4b4', 857: 'g4a4', 858: 'g4h3', 859: 'g4g3', 860: 'g4f3', 861: 'g4g2', 862: 'g4e2', 863: 'g4g1', 864: 'g4d1', 865: 'g4h6', 866: 'g4f6', 867: 'g4e5', 868: 'g4e3', 869: 'g4h2', 870: 'g4f2', 871: 'h4h8', 872: 'h4d8', 873: 'h4h7', 874: 'h4e7', 875: 'h4h6', 876: 'h4f6', 877: 'h4h5', 878: 'h4g5', 879: 'h4g4', 880: 'h4f4', 881: 'h4e4', 882: 'h4d4', 883: 'h4c4', 884: 'h4b4', 885: 'h4a4', 886: 'h4h3', 887: 'h4g3', 888: 'h4h2', 889: 'h4f2', 890: 'h4h1', 891: 'h4e1', 892: 'h4g6', 893: 'h4f5', 894: 'h4f3', 895: 'h4g2', 896: 'a5d8', 897: 'a5a8', 898: 'a5c7', 899: 'a5a7', 900: 'a5b6', 901: 'a5a6', 902: 'a5h5', 903: 'a5g5', 904: 'a5f5', 905: 'a5e5', 906: 'a5d5', 907: 'a5c5', 908: 'a5b5', 909: 'a5b4', 910: 'a5a4', 911: 'a5c3', 912: 'a5a3', 913: 'a5d2', 914: 'a5a2', 915: 'a5e1', 916: 'a5a1', 917: 'a5b7', 918: 'a5c6', 919: 'a5c4', 920: 'a5b3', 921: 'b5e8', 922: 'b5b8', 923: 'b5d7', 924: 'b5b7', 925: 'b5c6', 926: 'b5b6', 927: 'b5a6', 928: 'b5h5', 929: 'b5g5', 930: 'b5f5', 931: 'b5e5', 932: 'b5d5', 933: 'b5c5', 934: 'b5a5', 935: 'b5c4', 936: 'b5b4', 937: 'b5a4', 938: 'b5d3', 939: 'b5b3', 940: 'b5e2', 941: 'b5b2', 942: 'b5f1', 943: 'b5b1', 944: 'b5c7', 945: 'b5a7', 946: 'b5d6', 947: 'b5d4', 948: 'b5c3', 949: 'b5a3', 950: 'c5f8', 951: 'c5c8', 952: 'c5e7', 953: 'c5c7', 954: 'c5a7', 955: 'c5d6', 956: 'c5c6', 957: 'c5b6', 958: 'c5h5', 959: 'c5g5', 960: 'c5f5', 961: 'c5e5', 962: 'c5d5', 963: 'c5b5', 964: 'c5a5', 965: 'c5d4', 966: 'c5c4', 967: 'c5b4', 968: 'c5e3', 969: 'c5c3', 970: 'c5a3', 971: 'c5f2', 972: 'c5c2', 973: 'c5g1', 974: 'c5c1', 975: 'c5d7', 976: 'c5b7', 977: 'c5e6', 978: 'c5a6', 979: 'c5e4', 980: 'c5a4', 981: 'c5d3', 982: 'c5b3', 983: 'd5g8', 984: 'd5d8', 985: 'd5a8', 986: 'd5f7', 987: 'd5d7', 988: 'd5b7', 989: 'd5e6', 990: 'd5d6', 991: 'd5c6', 992: 'd5h5', 993: 'd5g5', 994: 'd5f5', 995: 'd5e5', 996: 'd5c5', 997: 'd5b5', 998: 'd5a5', 999: 'd5e4', 1000: 'd5d4', 1001: 'd5c4', 1002: 'd5f3', 1003: 'd5d3', 1004: 'd5b3', 1005: 'd5g2', 1006: 'd5d2', 1007: 'd5a2', 1008: 'd5h1', 1009: 'd5d1', 1010: 'd5e7', 1011: 'd5c7', 1012: 'd5f6', 1013: 'd5b6', 1014: 'd5f4', 1015: 'd5b4', 1016: 'd5e3', 1017: 'd5c3', 1018: 'e5h8', 1019: 'e5e8', 1020: 'e5b8', 1021: 'e5g7', 1022: 'e5e7', 1023: 'e5c7', 1024: 'e5f6', 1025: 'e5e6', 1026: 'e5d6', 1027: 'e5h5', 1028: 'e5g5', 1029: 'e5f5', 1030: 'e5d5', 1031: 'e5c5', 1032: 'e5b5', 1033: 'e5a5', 1034: 'e5f4', 1035: 'e5e4', 1036: 'e5d4', 1037: 'e5g3', 1038: 'e5e3', 1039: 'e5c3', 1040: 'e5h2', 1041: 'e5e2', 1042: 'e5b2', 1043: 'e5e1', 1044: 'e5a1', 1045: 'e5f7', 1046: 'e5d7', 1047: 'e5g6', 1048: 'e5c6', 1049: 'e5g4', 1050: 'e5c4', 1051: 'e5f3', 1052: 'e5d3', 1053: 'f5f8', 1054: 'f5c8', 1055: 'f5h7', 1056: 'f5f7', 1057: 'f5d7', 1058: 'f5g6', 1059: 'f5f6', 1060: 'f5e6', 1061: 'f5h5', 1062: 'f5g5', 1063: 'f5e5', 1064: 'f5d5', 1065: 'f5c5', 1066: 'f5b5', 1067: 'f5a5', 1068: 'f5g4', 1069: 'f5f4', 1070: 'f5e4', 1071: 'f5h3', 1072: 'f5f3', 1073: 'f5d3', 1074: 'f5f2', 1075: 'f5c2', 1076: 'f5f1', 1077: 'f5b1', 1078: 'f5g7', 1079: 'f5e7', 1080: 'f5h6', 1081: 'f5d6', 1082: 'f5h4', 1083: 'f5d4', 1084: 'f5g3', 1085: 'f5e3', 1086: 'g5g8', 1087: 'g5d8', 1088: 'g5g7', 1089: 'g5e7', 1090: 'g5h6', 1091: 'g5g6', 1092: 'g5f6', 1093: 'g5h5', 1094: 'g5f5', 1095: 'g5e5', 1096: 'g5d5', 1097: 'g5c5', 1098: 'g5b5', 1099: 'g5a5', 1100: 'g5h4', 1101: 'g5g4', 1102: 'g5f4', 1103: 'g5g3', 1104: 'g5e3', 1105: 'g5g2', 1106: 'g5d2', 1107: 'g5g1', 1108: 'g5c1', 1109: 'g5h7', 1110: 'g5f7', 1111: 'g5e6', 1112: 'g5e4', 1113: 'g5h3', 1114: 'g5f3', 1115: 'h5h8', 1116: 'h5e8', 1117: 'h5h7', 1118: 'h5f7', 1119: 'h5h6', 1120: 'h5g6', 1121: 'h5g5', 1122: 'h5f5', 1123: 'h5e5', 1124: 'h5d5', 1125: 'h5c5', 1126: 'h5b5', 1127: 'h5a5', 1128: 'h5h4', 1129: 'h5g4', 1130: 'h5h3', 1131: 'h5f3', 1132: 'h5h2', 1133: 'h5e2', 1134: 'h5h1', 1135: 'h5d1', 1136: 'h5g7', 1137: 'h5f6', 1138: 'h5f4', 1139: 'h5g3', 1140: 'a6c8', 1141: 'a6a8', 1142: 'a6b7', 1143: 'a6a7', 1144: 'a6h6', 1145: 'a6g6', 1146: 'a6f6', 1147: 'a6e6', 1148: 'a6d6', 1149: 'a6c6', 1150: 'a6b6', 1151: 'a6b5', 1152: 'a6a5', 1153: 'a6c4', 1154: 'a6a4', 1155: 'a6d3', 1156: 'a6a3', 1157: 'a6e2', 1158: 'a6a2', 1159: 'a6f1', 1160: 'a6a1', 1161: 'a6b8', 1162: 'a6c7', 1163: 'a6c5', 1164: 'a6b4', 1165: 'b6d8', 1166: 'b6b8', 1167: 'b6c7', 1168: 'b6b7', 1169: 'b6a7', 1170: 'b6h6', 1171: 'b6g6', 1172: 'b6f6', 1173: 'b6e6', 1174: 'b6d6', 1175: 'b6c6', 1176: 'b6a6', 1177: 'b6c5', 1178: 'b6b5', 1179: 'b6a5', 1180: 'b6d4', 1181: 'b6b4', 1182: 'b6e3', 1183: 'b6b3', 1184: 'b6f2', 1185: 'b6b2', 1186: 'b6g1', 1187: 'b6b1', 1188: 'b6c8', 1189: 'b6a8', 1190: 'b6d7', 1191: 'b6d5', 1192: 'b6c4', 1193: 'b6a4', 1194: 'c6e8', 1195: 'c6c8', 1196: 'c6a8', 1197: 'c6d7', 1198: 'c6c7', 1199: 'c6b7', 1200: 'c6h6', 1201: 'c6g6', 1202: 'c6f6', 1203: 'c6e6', 1204: 'c6d6', 1205: 'c6b6', 1206: 'c6a6', 1207: 'c6d5', 1208: 'c6c5', 1209: 'c6b5', 1210: 'c6e4', 1211: 'c6c4', 1212: 'c6a4', 1213: 'c6f3', 1214: 'c6c3', 1215: 'c6g2', 1216: 'c6c2', 1217: 'c6h1', 1218: 'c6c1', 1219: 'c6d8', 1220: 'c6b8', 1221: 'c6e7', 1222: 'c6a7', 1223: 'c6e5', 1224: 'c6a5', 1225: 'c6d4', 1226: 'c6b4', 1227: 'd6f8', 1228: 'd6d8', 1229: 'd6b8', 1230: 'd6e7', 1231: 'd6d7', 1232: 'd6c7', 1233: 'd6h6', 1234: 'd6g6', 1235: 'd6f6', 1236: 'd6e6', 1237: 'd6c6', 1238: 'd6b6', 1239: 'd6a6', 1240: 'd6e5', 1241: 'd6d5', 1242: 'd6c5', 1243: 'd6f4', 1244: 'd6d4', 1245: 'd6b4', 1246: 'd6g3', 1247: 'd6d3', 1248: 'd6a3', 1249: 'd6h2', 1250: 'd6d2', 1251: 'd6d1', 1252: 'd6e8', 1253: 'd6c8', 1254: 'd6f7', 1255: 'd6b7', 1256: 'd6f5', 1257: 'd6b5', 1258: 'd6e4', 1259: 'd6c4', 1260: 'e6g8', 1261: 'e6e8', 1262: 'e6c8', 1263: 'e6f7', 1264: 'e6e7', 1265: 'e6d7', 1266: 'e6h6', 1267: 'e6g6', 1268: 'e6f6', 1269: 'e6d6', 1270: 'e6c6', 1271: 'e6b6', 1272: 'e6a6', 1273: 'e6f5', 1274: 'e6e5', 1275: 'e6d5', 1276: 'e6g4', 1277: 'e6e4', 1278: 'e6c4', 1279: 'e6h3', 1280: 'e6e3', 1281: 'e6b3', 1282: 'e6e2', 1283: 'e6a2', 1284: 'e6e1', 1285: 'e6f8', 1286: 'e6d8', 1287: 'e6g7', 1288: 'e6c7', 1289: 'e6g5', 1290: 'e6c5', 1291: 'e6f4', 1292: 'e6d4', 1293: 'f6h8', 1294: 'f6f8', 1295: 'f6d8', 1296: 'f6g7', 1297: 'f6f7', 1298: 'f6e7', 1299: 'f6h6', 1300: 'f6g6', 1301: 'f6e6', 1302: 'f6d6', 1303: 'f6c6', 1304: 'f6b6', 1305: 'f6a6', 1306: 'f6g5', 1307: 'f6f5', 1308: 'f6e5', 1309: 'f6h4', 1310: 'f6f4', 1311: 'f6d4', 1312: 'f6f3', 1313: 'f6c3', 1314: 'f6f2', 1315: 'f6b2', 1316: 'f6f1', 1317: 'f6a1', 1318: 'f6g8', 1319: 'f6e8', 1320: 'f6h7', 1321: 'f6d7', 1322: 'f6h5', 1323: 'f6d5', 1324: 'f6g4', 1325: 'f6e4', 1326: 'g6g8', 1327: 'g6e8', 1328: 'g6h7', 1329: 'g6g7', 1330: 'g6f7', 1331: 'g6h6', 1332: 'g6f6', 1333: 'g6e6', 1334: 'g6d6', 1335: 'g6c6', 1336: 'g6b6', 1337: 'g6a6', 1338: 'g6h5', 1339: 'g6g5', 1340: 'g6f5', 1341: 'g6g4', 1342: 'g6e4', 1343: 'g6g3', 1344: 'g6d3', 1345: 'g6g2', 1346: 'g6c2', 1347: 'g6g1', 1348: 'g6b1', 1349: 'g6h8', 1350: 'g6f8', 1351: 'g6e7', 1352: 'g6e5', 1353: 'g6h4', 1354: 'g6f4', 1355: 'h6h8', 1356: 'h6f8', 1357: 'h6h7', 1358: 'h6g7', 1359: 'h6g6', 1360: 'h6f6', 1361: 'h6e6', 1362: 'h6d6', 1363: 'h6c6', 1364: 'h6b6', 1365: 'h6a6', 1366: 'h6h5', 1367: 'h6g5', 1368: 'h6h4', 1369: 'h6f4', 1370: 'h6h3', 1371: 'h6e3', 1372: 'h6h2', 1373: 'h6d2', 1374: 'h6h1', 1375: 'h6c1', 1376: 'h6g8', 1377: 'h6f7', 1378: 'h6f5', 1379: 'h6g4', 1380: 'a7b8', 1381: 'a7a8', 1382: 'a7h7', 1383: 'a7g7', 1384: 'a7f7', 1385: 'a7e7', 1386: 'a7d7', 1387: 'a7c7', 1388: 'a7b7', 1389: 'a7b6', 1390: 'a7a6', 1391: 'a7c5', 1392: 'a7a5', 1393: 'a7d4', 1394: 'a7a4', 1395: 'a7e3', 1396: 'a7a3', 1397: 'a7f2', 1398: 'a7a2', 1399: 'a7g1', 1400: 'a7a1', 1401: 'a7c8', 1402: 'a7c6', 1403: 'a7b5', 1404: 'b7c8', 1405: 'b7b8', 1406: 'b7a8', 1407: 'b7h7', 1408: 'b7g7', 1409: 'b7f7', 1410: 'b7e7', 1411: 'b7d7', 1412: 'b7c7', 1413: 'b7a7', 1414: 'b7c6', 1415: 'b7b6', 1416: 'b7a6', 1417: 'b7d5', 1418: 'b7b5', 1419: 'b7e4', 1420: 'b7b4', 1421: 'b7f3', 1422: 'b7b3', 1423: 'b7g2', 1424: 'b7b2', 1425: 'b7h1', 1426: 'b7b1', 1427: 'b7d8', 1428: 'b7d6', 1429: 'b7c5', 1430: 'b7a5', 1431: 'c7d8', 1432: 'c7c8', 1433: 'c7b8', 1434: 'c7h7', 1435: 'c7g7', 1436: 'c7f7', 1437: 'c7e7', 1438: 'c7d7', 1439: 'c7b7', 1440: 'c7a7', 1441: 'c7d6', 1442: 'c7c6', 1443: 'c7b6', 1444: 'c7e5', 1445: 'c7c5', 1446: 'c7a5', 1447: 'c7f4', 1448: 'c7c4', 1449: 'c7g3', 1450: 'c7c3', 1451: 'c7h2', 1452: 'c7c2', 1453: 'c7c1', 1454: 'c7e8', 1455: 'c7a8', 1456: 'c7e6', 1457: 'c7a6', 1458: 'c7d5', 1459: 'c7b5', 1460: 'd7e8', 1461: 'd7d8', 1462: 'd7c8', 1463: 'd7h7', 1464: 'd7g7', 1465: 'd7f7', 1466: 'd7e7', 1467: 'd7c7', 1468: 'd7b7', 1469: 'd7a7', 1470: 'd7e6', 1471: 'd7d6', 1472: 'd7c6', 1473: 'd7f5', 1474: 'd7d5', 1475: 'd7b5', 1476: 'd7g4', 1477: 'd7d4', 1478: 'd7a4', 1479: 'd7h3', 1480: 'd7d3', 1481: 'd7d2', 1482: 'd7d1', 1483: 'd7f8', 1484: 'd7b8', 1485: 'd7f6', 1486: 'd7b6', 1487: 'd7e5', 1488: 'd7c5', 1489: 'e7f8', 1490: 'e7e8', 1491: 'e7d8', 1492: 'e7h7', 1493: 'e7g7', 1494: 'e7f7', 1495: 'e7d7', 1496: 'e7c7', 1497: 'e7b7', 1498: 'e7a7', 1499: 'e7f6', 1500: 'e7e6', 1501: 'e7d6', 1502: 'e7g5', 1503: 'e7e5', 1504: 'e7c5', 1505: 'e7h4', 1506: 'e7e4', 1507: 'e7b4', 1508: 'e7e3', 1509: 'e7a3', 1510: 'e7e2', 1511: 'e7e1', 1512: 'e7g8', 1513: 'e7c8', 1514: 'e7g6', 1515: 'e7c6', 1516: 'e7f5', 1517: 'e7d5', 1518: 'f7g8', 1519: 'f7f8', 1520: 'f7e8', 1521: 'f7h7', 1522: 'f7g7', 1523: 'f7e7', 1524: 'f7d7', 1525: 'f7c7', 1526: 'f7b7', 1527: 'f7a7', 1528: 'f7g6', 1529: 'f7f6', 1530: 'f7e6', 1531: 'f7h5', 1532: 'f7f5', 1533: 'f7d5', 1534: 'f7f4', 1535: 'f7c4', 1536: 'f7f3', 1537: 'f7b3', 1538: 'f7f2', 1539: 'f7a2', 1540: 'f7f1', 1541: 'f7h8', 1542: 'f7d8', 1543: 'f7h6', 1544: 'f7d6', 1545: 'f7g5', 1546: 'f7e5', 1547: 'g7h8', 1548: 'g7g8', 1549: 'g7f8', 1550: 'g7h7', 1551: 'g7f7', 1552: 'g7e7', 1553: 'g7d7', 1554: 'g7c7', 1555: 'g7b7', 1556: 'g7a7', 1557: 'g7h6', 1558: 'g7g6', 1559: 'g7f6', 1560: 'g7g5', 1561: 'g7e5', 1562: 'g7g4', 1563: 'g7d4', 1564: 'g7g3', 1565: 'g7c3', 1566: 'g7g2', 1567: 'g7b2', 1568: 'g7g1', 1569: 'g7a1', 1570: 'g7e8', 1571: 'g7e6', 1572: 'g7h5', 1573: 'g7f5', 1574: 'h7h8', 1575: 'h7g8', 1576: 'h7g7', 1577: 'h7f7', 1578: 'h7e7', 1579: 'h7d7', 1580: 'h7c7', 1581: 'h7b7', 1582: 'h7a7', 1583: 'h7h6', 1584: 'h7g6', 1585: 'h7h5', 1586: 'h7f5', 1587: 'h7h4', 1588: 'h7e4', 1589: 'h7h3', 1590: 'h7d3', 1591: 'h7h2', 1592: 'h7c2', 1593: 'h7h1', 1594: 'h7b1', 1595: 'h7f8', 1596: 'h7f6', 1597: 'h7g5', 1598: 'a8h8', 1599: 'a8g8', 1600: 'a8f8', 1601: 'a8e8', 1602: 'a8d8', 1603: 'a8c8', 1604: 'a8b8', 1605: 'a8b7', 1606: 'a8a7', 1607: 'a8c6', 1608: 'a8a6', 1609: 'a8d5', 1610: 'a8a5', 1611: 'a8e4', 1612: 'a8a4', 1613: 'a8f3', 1614: 'a8a3', 1615: 'a8g2', 1616: 'a8a2', 1617: 'a8h1', 1618: 'a8a1', 1619: 'a8c7', 1620: 'a8b6', 1621: 'b8h8', 1622: 'b8g8', 1623: 'b8f8', 1624: 'b8e8', 1625: 'b8d8', 1626: 'b8c8', 1627: 'b8a8', 1628: 'b8c7', 1629: 'b8b7', 1630: 'b8a7', 1631: 'b8d6', 1632: 'b8b6', 1633: 'b8e5', 1634: 'b8b5', 1635: 'b8f4', 1636: 'b8b4', 1637: 'b8g3', 1638: 'b8b3', 1639: 'b8h2', 1640: 'b8b2', 1641: 'b8b1', 1642: 'b8d7', 1643: 'b8c6', 1644: 'b8a6', 1645: 'c8h8', 1646: 'c8g8', 1647: 'c8f8', 1648: 'c8e8', 1649: 'c8d8', 1650: 'c8b8', 1651: 'c8a8', 1652: 'c8d7', 1653: 'c8c7', 1654: 'c8b7', 1655: 'c8e6', 1656: 'c8c6', 1657: 'c8a6', 1658: 'c8f5', 1659: 'c8c5', 1660: 'c8g4', 1661: 'c8c4', 1662: 'c8h3', 1663: 'c8c3', 1664: 'c8c2', 1665: 'c8c1', 1666: 'c8e7', 1667: 'c8a7', 1668: 'c8d6', 1669: 'c8b6', 1670: 'd8h8', 1671: 'd8g8', 1672: 'd8f8', 1673: 'd8e8', 1674: 'd8c8', 1675: 'd8b8', 1676: 'd8a8', 1677: 'd8e7', 1678: 'd8d7', 1679: 'd8c7', 1680: 'd8f6', 1681: 'd8d6', 1682: 'd8b6', 1683: 'd8g5', 1684: 'd8d5', 1685: 'd8a5', 1686: 'd8h4', 1687: 'd8d4', 1688: 'd8d3', 1689: 'd8d2', 1690: 'd8d1', 1691: 'd8f7', 1692: 'd8b7', 1693: 'd8e6', 1694: 'd8c6', 1695: 'e8h8', 1696: 'e8g8', 1697: 'e8f8', 1698: 'e8d8', 1699: 'e8c8', 1700: 'e8b8', 1701: 'e8a8', 1702: 'e8f7', 1703: 'e8e7', 1704: 'e8d7', 1705: 'e8g6', 1706: 'e8e6', 1707: 'e8c6', 1708: 'e8h5', 1709: 'e8e5', 1710: 'e8b5', 1711: 'e8e4', 1712: 'e8a4', 1713: 'e8e3', 1714: 'e8e2', 1715: 'e8e1', 1716: 'e8g7', 1717: 'e8c7', 1718: 'e8f6', 1719: 'e8d6', 1720: 'f8h8', 1721: 'f8g8', 1722: 'f8e8', 1723: 'f8d8', 1724: 'f8c8', 1725: 'f8b8', 1726: 'f8a8', 1727: 'f8g7', 1728: 'f8f7', 1729: 'f8e7', 1730: 'f8h6', 1731: 'f8f6', 1732: 'f8d6', 1733: 'f8f5', 1734: 'f8c5', 1735: 'f8f4', 1736: 'f8b4', 1737: 'f8f3', 1738: 'f8a3', 1739: 'f8f2', 1740: 'f8f1', 1741: 'f8h7', 1742: 'f8d7', 1743: 'f8g6', 1744: 'f8e6', 1745: 'g8h8', 1746: 'g8f8', 1747: 'g8e8', 1748: 'g8d8', 1749: 'g8c8', 1750: 'g8b8', 1751: 'g8a8', 1752: 'g8h7', 1753: 'g8g7', 1754: 'g8f7', 1755: 'g8g6', 1756: 'g8e6', 1757: 'g8g5', 1758: 'g8d5', 1759: 'g8g4', 1760: 'g8c4', 1761: 'g8g3', 1762: 'g8b3', 1763: 'g8g2', 1764: 'g8a2', 1765: 'g8g1', 1766: 'g8e7', 1767: 'g8h6', 1768: 'g8f6', 1769: 'h8g8', 1770: 'h8f8', 1771: 'h8e8', 1772: 'h8d8', 1773: 'h8c8', 1774: 'h8b8', 1775: 'h8a8', 1776: 'h8h7', 1777: 'h8g7', 1778: 'h8h6', 1779: 'h8f6', 1780: 'h8h5', 1781: 'h8e5', 1782: 'h8h4', 1783: 'h8d4', 1784: 'h8h3', 1785: 'h8c3', 1786: 'h8h2', 1787: 'h8b2', 1788: 'h8h1', 1789: 'h8a1', 1790: 'h8f7', 1791: 'h8g6', 1792: 'a7a8q', 1793: 'a7a8r', 1794: 'a7a8b', 1795: 'a7a8n', 1796: 'a7b8q', 1797: 'a7b8r', 1798: 'a7b8b', 1799: 'a7b8n', 1800: 'b7b8q', 1801: 'b7b8r', 1802: 'b7b8b', 1803: 'b7b8n', 1804: 'b7a8q', 1805: 'b7a8r', 1806: 'b7a8b', 1807: 'b7a8n', 1808: 'b7c8q', 1809: 'b7c8r', 1810: 'b7c8b', 1811: 'b7c8n', 1812: 'c7c8q', 1813: 'c7c8r', 1814: 'c7c8b', 1815: 'c7c8n', 1816: 'c7b8q', 1817: 'c7b8r', 1818: 'c7b8b', 1819: 'c7b8n', 1820: 'c7d8q', 1821: 'c7d8r', 1822: 'c7d8b', 1823: 'c7d8n', 1824: 'd7d8q', 1825: 'd7d8r', 1826: 'd7d8b', 1827: 'd7d8n', 1828: 'd7c8q', 1829: 'd7c8r', 1830: 'd7c8b', 1831: 'd7c8n', 1832: 'd7e8q', 1833: 'd7e8r', 1834: 'd7e8b', 1835: 'd7e8n', 1836: 'e7e8q', 1837: 'e7e8r', 1838: 'e7e8b', 1839: 'e7e8n', 1840: 'e7d8q', 1841: 'e7d8r', 1842: 'e7d8b', 1843: 'e7d8n', 1844: 'e7f8q', 1845: 'e7f8r', 1846: 'e7f8b', 1847: 'e7f8n', 1848: 'f7f8q', 1849: 'f7f8r', 1850: 'f7f8b', 1851: 'f7f8n', 1852: 'f7e8q', 1853: 'f7e8r', 1854: 'f7e8b', 1855: 'f7e8n', 1856: 'f7g8q', 1857: 'f7g8r', 1858: 'f7g8b', 1859: 'f7g8n', 1860: 'g7g8q', 1861: 'g7g8r', 1862: 'g7g8b', 1863: 'g7g8n', 1864: 'g7f8q', 1865: 'g7f8r', 1866: 'g7f8b', 1867: 'g7f8n', 1868: 'g7h8q', 1869: 'g7h8r', 1870: 'g7h8b', 1871: 'g7h8n', 1872: 'h7h8q', 1873: 'h7h8r', 1874: 'h7h8b', 1875: 'h7h8n', 1876: 'h7g8q', 1877: 'h7g8r', 1878: 'h7g8b', 1879: 'h7g8n'}

def idx_to_uci(idx):
    uci_move = get_move_dict()[idx]
    return uci_move

def select_indices(lst, max_positive=200, max_negative=1000):
    # Get the indices of positive and negative values
    positive_indices = [i for i, val in enumerate(lst) if val == 1]
    negative_indices = [i for i, val in enumerate(lst) if val == 0]

    # Randomly select up to max_positive from positive_indices
    selected_positive = random.sample(positive_indices, min(max_positive, len(positive_indices)))
    print(len(selected_positive))
    # Randomly select up to max_negative from negative_indices
    selected_negative = random.sample(negative_indices, min(max_negative, len(negative_indices)))

    return selected_positive, selected_negative


def convert_indices(original_indices):
    larger_indices = []
    for index in original_indices:
        # Get 8 corresponding indices for each original index
        start_index = index * 8
        larger_indices.extend(range(start_index, start_index + 8))
    return larger_indices


def evaluate_sae_feature(feature_activations, ground_truth, threshold):
    # Average the activations for each board (8 tokens per board)
    # feature_activations_avg = feature_activations.view(-1, 8).mean(dim=1)

    feature_predictions = (feature_activations > threshold).int().cpu().numpy()
    precision, recall, f1, _ = precision_recall_fscore_support(ground_truth, feature_predictions, average='binary',
                                                               zero_division=0)
    return precision, recall, f1


def process_sae_feature(args):
    feature_index, feature_activations, ground_truth = args
    if torch.sum(feature_activations) == 0:
        return feature_index, 0, 0, 0, 0
    else:
        thresholds = torch.linspace(feature_activations.min(), 0.4 * feature_activations.max(), steps=8)
        eval_func = partial(evaluate_sae_feature, feature_activations, ground_truth)
        results = list(map(eval_func, thresholds))

        best_threshold_index = max(range(len(results)), key=lambda i: results[i][-1])
        best_precision, best_recall, best_f1 = results[best_threshold_index]
        best_threshold = thresholds[best_threshold_index].item()
        return feature_index, best_threshold, best_precision, best_recall, best_f1


def cache_examples_and_activations(concept_functions, concept_names, sae_activations, board_fens, preds):
    samples_and_activations = {}
    for i in range(len(concept_functions)):
        concept_func = concept_functions[i]
        concept_name = concept_names[i]

        if concept_name not in move_dependent_header:
            continue

        print(concept_name)

        labels = [concept_func(board_fens[i], preds[i]) for i in range(len(board_fens))]

        if concept_name == "check_tactical_conditions":
            print(labels)

        positive_indices, negative_indices = select_indices(labels)
        temp_dic = {"positives": torch.tensor([1 for index in positive_indices]),
                    'negatives': torch.tensor([0 for index in negative_indices])}

        for key in sae_activations:
            temp_dic[key] = torch.cat((sae_activations[key][positive_indices],
                                       sae_activations[key][negative_indices]))

        samples_and_activations[concept_name] = temp_dic

    return samples_and_activations


def main() -> None:
    with open('maia2_activations_for_sae_2048_pooled_full.pickle', 'rb') as f:
        maia2_activations = pickle.load(f)
    target_key_list = ['transformer block 0 hidden states', 'transformer block 1 hidden states']  # 'conv_last'

    sae_activations = maia2_activations['all_sae_activations']
    board_fens = maia2_activations['board_fen']
    preds = maia2_activations['preds']
    preds = [idx_to_uci(int(idx)) for idx in preds]

    num_cores = min(72, cpu_count())
    results = {}

    samples_and_activations = cache_examples_and_activations(list(function_map.values()), list(function_map.keys()),
                                                             sae_activations, board_fens, preds)

    for concept_name, concept_func in function_map.items():
        if concept_name not in move_dependent_header:
            continue

        print(f"Evaluating concept: {concept_name}")

        for key in target_key_list:
            print(f"Processing {key}")
            sae_feature_activations = sae_activations[key]
            n_features = sae_feature_activations.shape[1]

            sampled_sae_activations = samples_and_activations[concept_name][key]
            ground_truth = torch.cat((samples_and_activations[concept_name]["positives"],
                                      samples_and_activations[concept_name]["negatives"]))

            args_list = [(i, sampled_sae_activations[:, i], ground_truth) for i in range(n_features)]

            with Pool(num_cores) as pool:
                concept_results = list(tqdm.tqdm(pool.imap(process_sae_feature, args_list), total=n_features))

            # Sort features by F1 score to calcuate the "coverage"
            concept_results.sort(key=lambda x: x[4], reverse=True)
            results[concept_name] = concept_results

            top_feature = concept_results[0]
            print(f"\nBest feature for {concept_name}:")
            print(f"Feature index: {top_feature[0]}")
            print(f"Best threshold: {top_feature[1]:.4f}")
            print(f"Precision: {top_feature[2]:.4f}")
            print(f"Recall: {top_feature[3]:.4f}")
            print(f"F1-score: {top_feature[4]:.4f}")

            N = 12
            print(f"\nTop {N} features for {concept_name}:")
            for i, (feature_index, threshold, precision, recall, f1) in enumerate(concept_results[:N], 1):
                print(f"{i}. Feature {feature_index}: F1={f1:.4f}, Precision={precision:.4f}, Recall={recall:.4f}, Threshold={threshold:.4f}")

    with open('sae_feature_evaluation_results.pickle', 'wb') as f:
        pickle.dump(results, f)

# HERE IS THE CODE TO FIND THE BEST LAYER 1 FEATURES

    data = results
    # print(data['is_piece_no_longer_under_attack_e4'])


    for_difan = {}

    N = 5
    for concept_name in data:
        concept_results = data[concept_name]
        for i, (feature_index, threshold, precision, recall, f1) in enumerate(concept_results[:N], 1):
            if threshold > 0 and f1 > 0.55:
                for_difan[concept_name[-2:]] = (feature_index, f1)
                break


    print(len(for_difan))

    print(for_difan)



if __name__ == "__main__":
    main()